<?php

declare(strict_types=1);

/**
 * This file is part of the SpojeNet\AbraFlexi package.
 *
 * (c) 2019-2024 SpojeNet s.r.o. <http://spoje.net/>
 * (c) 2025 SpojeNetIT s.r.o. <http://spojenet.cz/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\Adresar;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2024-10-02 at 10:07:04.
 */
class AdresarTest extends \PHPUnit\Framework\TestCase
{
    protected Adresar $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Adresar();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\Adresar
     */
    public function testEvidence(): void
    {
        $this->assertEquals('adresar', $this->object->evidence);
    }

    /**
     * @covers \AbraFlexi\Adresar::getSumFromAbraFlexi
     */
    public function testGetSumFromAbraFlexi(): void
    {
        $this->assertEquals([], $this->object->getSumFromAbraFlexi());
    }

    /**
     * Prepare Addresbook entry.
     *
     * @param array $initialData
     *
     * @return \AbraFlexi\Adresar
     */
    public static function makeTestAddress($initialData = [])
    {
        $testCode = 'TEST_'.time();
        $address = new \AbraFlexi\Adresar();
        $address->takeData(array_merge([
            'kod' => $testCode,
            'nazev' => 'TESTer '.time(),
            'poznam' => 'AbraFlexi Test Address',
        ], $initialData));

        if ($address->sync()) {
            $address->addStatusMessage($address->getApiURL().' '.\AbraFlexi\Functions::uncode((string) $address->getRecordIdent().' '.$address->getDataValue('mail')), 'success');
        } else {
            $address->addStatusMessage(json_encode($address->getData()), 'debug');
        }

        return $address;
    }
}
