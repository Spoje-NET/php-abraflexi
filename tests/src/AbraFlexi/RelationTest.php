<?php

declare(strict_types=1);

/**
 * This file is part of the SpojeNet\AbraFlexi package.
 *
 * (c) 2019-2024 SpojeNet s.r.o. <http://spoje.net/>
 * (c) 2025 SpojeNetIT s.r.o. <http://spojenet.cz/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\Relation;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2024-10-02 at 10:07:01.
 */
class RelationTest extends \PHPUnit\Framework\TestCase
{
    protected Relation $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        // Create a Relation object with required arguments for testing.
        $this->object = new Relation('TEST_CODE', 'faktura-vydana');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\Relation::__toString
     */
    public function testToString(): void
    {
        $relation = new Relation('CODE123', 'faktura-vydana');
        $this->assertSame('CODE123', (string) $relation);

        $relationArr = new Relation(['kod' => 'KOD456'], 'faktura-vydana');
        $this->assertSame('KOD456', (string) $relationArr);
    }

    /**
     * @covers \AbraFlexi\Relation::getRelationTarget
     */
    public function testgetRelationTarget(): void
    {
        $relation = new Relation('code:CZ', 'stat');
        $target = $relation->getRelationTarget();
        $this->assertInstanceOf(\AbraFlexi\RO::class, $target);
        // Assert that the record code matches the expected value.
        $this->assertEquals('code:CZ', $target->getRecordCode());
    }
}
