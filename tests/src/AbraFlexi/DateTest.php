<?php

declare(strict_types=1);

/**
 * This file is part of the SpojeNet\AbraFlexi package.
 *
 * (c) 2019-2024 SpojeNet s.r.o. <http://spoje.net/>
 * (c) 2025 SpojeNetIT s.r.o. <http://spojenet.cz/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\Date;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2024-10-02 at 10:07:33.
 */
class DateTest extends \PHPUnit\Framework\TestCase
{
    protected Date $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Date();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\Date::__toString
     */
    public function testToString(): void
    {
        $this->assertEquals(date('Y-m-d'), $this->object->__toString());
        $this->assertEquals('2024-10-02', (new Date('2024-10-02'))->__toString());
    }

    /**
     * @covers \AbraFlexi\Date::fromTimestamp
     */
    public function testFromTimestamp(): void
    {
        $timestamp = strtotime('2024-10-02');
        $result = Date::fromTimestamp($timestamp);
        $this->assertInstanceOf(\AbraFlexi\Date::class, $result);
        $this->assertEquals('2024-10-02', (string) $result);
    }

    /**
     * @covers \AbraFlexi\Date::__construct
     */
    public function testConstruct(): void
    {
        $date = new Date('2024-10-02');
        $this->assertEquals('2024-10-02', (string) $date);

        $dateWithTimezone = new Date('2024-10-02+02:00');
        $this->assertEquals('2024-10-02', (string) $dateWithTimezone);

        $dateWithZ = new Date('2024-10-02Z');
        $this->assertEquals('2024-10-02', (string) $dateWithZ);

        $now = new Date('NOW');
        $this->assertEquals(date('Y-m-d'), (string) $now);

        $empty = new Date('');
        $this->assertTrue($empty->isNull);
    }
}