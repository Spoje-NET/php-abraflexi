<?php

declare(strict_types=1);

/**
 * This file is part of the SpojeNet\AbraFlexi package.
 *
 * (c) 2019-2024 SpojeNet s.r.o. <http://spoje.net/>
 * (c) 2025 SpojeNetIT s.r.o. <http://spojenet.cz/>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\DateTime;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2024-10-02 at 10:07:39.
 */
class DateTimeTest extends \PHPUnit\Framework\TestCase
{
    protected DateTime $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new DateTime();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * @covers \AbraFlexi\DateTime::__construct
     */
    public function testConstruct(): void
    {
        $dateTime = new DateTime('2017-09-26T10:00:53.755+02:00');
        $this->assertEquals('2017-09-26T10:00:53.755000+02:00', (string) $dateTime);

        $dateTimeOld = new DateTime('2017-05-19T00:00:00+02:00');
        $this->assertEquals('2017-05-19T00:00:00.000000+02:00', (string) $dateTimeOld);

        $now = new DateTime('NOW');
        $this->assertMatchesRegularExpression('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}\+\d{2}:\d{2}$/', (string) $now);

        $empty = new DateTime('');
        $this->assertTrue($empty->isNull);
    }


    /**
     * @covers \AbraFlexi\DateTime::__toString
     */
    public function testToString(): void
    {
        $this->assertMatchesRegularExpression('/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{6}\+\d{2}:\d{2}$/', $this->object->__toString());
    }

    /**
     * @covers \AbraFlexi\DateTime::fromTimestamp
     */
    public function testFromTimestamp(): void
    {
        $timestamp = strtotime('2024-10-02 10:30:00');
        $result = DateTime::fromTimestamp($timestamp);
        $this->assertInstanceOf(\AbraFlexi\DateTime::class, $result);
        $this->assertStringStartsWith('2024-10-02T10:30:00', (string) $result);
    }


    /**
     * @covers \AbraFlexi\DateTime::setFormat
     */
    public function testSetFormat(): void
    {
        $this->object->setFormat('Y-m-d H:i:s');
        $this->assertMatchesRegularExpression('/^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/', $this->object->__toString());
        // Restore default format for other tests
        $this->object->setFormat('Y-m-d\TH:i:s.u+P');
    }
}