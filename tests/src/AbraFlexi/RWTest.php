<?php

declare(strict_types=1);

/**
 * This file is part of the EaseCore package.
 *
 * (c) Vítězslav Dvořák <http://vitexsoftware.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test\AbraFlexi;

use AbraFlexi\RW;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-04 at 10:08:36.
 */
class RWTest extends ROTest
{
    /**
     * Poznámka vkládaná do záznamů vytvářených během testů.
     */
    public string $poznam = 'Generováno UnitTestem PHP Knihovny https://github.com/Spoje-NET/AbraFlexi';
    public array $insertableData = [];
    protected RW $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers \AbraFlexi\AbraFlexiRW::__construct
     */
    protected function setUp(): void
    {
        $this->object = new RW(
            null,
            ['atomic' => false, 'debug' => false],
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
    }

    /**
     * Gives You data able to insert into current evidence.
     *
     * @param string $code custom record code
     *
     * @return array
     */
    public function getDataForInsert($code = 'UnitTest')
    {
        $dataForInsert = [];
        $structure = $this->object->getColumnsInfo();

        if (\count($structure)) {
            if (\array_key_exists('typDokl', $structure)) {
                if ($structure['typDokl']['type'] === 'relation') {
                    $relatedEvidence = basename($structure['typDokl']['url']);
                    $loader = new \AbraFlexi\RO(
                        null,
                        ['evidence' => $relatedEvidence],
                    );
                    $typDoklRaw = $loader->getColumnsFromAbraFlexi([
                        'kod'], ['limit' => 1]);
                    $dataForInsert['typDokl'] = \AbraFlexi\Functions::code((string) $typDoklRaw[0]['kod']);
                }
            }

            if (\array_key_exists('poznam', $structure)) {
                $dataForInsert['poznam'] = $this->poznam.' '.$code;
            }

            if (\array_key_exists('nazev', $structure)) {
                $dataForInsert['nazev'] = $code.' '.$this->poznam.' ';
            }

            if (\array_key_exists('kod', $structure)) {
                $dataForInsert['kod'] = \AbraFlexi\Functions::uncode((string) $this->object->getKod($code));
            }
        }

        return $dataForInsert;
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::performAction
     */
    public function testPerformAction(): void
    {
        $this->expectException(\AbraFlexi\Exception::class);

        $actions = $this->object->getActionsInfo();

        if (!empty($actions) && \count($actions)) {
            if (\array_key_exists('new', $actions)) {
                $this->object->performAction('new', 'ext');
            }

            if (\array_key_exists('storno', $actions)) {
                $this->object->insertToAbraFlexi($this->getDataForInsert('StornoTest_'.time()));
                $this->object->performAction('storno', 'int');
            }
        }

        $this->object->performAction('nonexitst');
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::timestampToFlexiDate
     */
    public function testTimestampToFlexiDate(): void
    {
        $this->assertNull($this->object->timestampToFlexiDate());
        $this->assertEquals(
            '2016-09-16',
            $this->object->timestampToFlexiDate('1474040506'),
        );
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::timestampToFlexiDateTime
     */
    public function testTimestampToFlexiDateTime(): void
    {
        $this->assertNull($this->object->timestampToFlexiDateTime());
        $flexiDateTime = $this->object->timestampToFlexiDateTime('1474040506');
        $this->assertEquals('2016-09-16', substr($flexiDateTime, 0, 10));
        $this->assertEquals(':41:46', substr($flexiDateTime, -6));
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::objectToID
     */
    public function testObjectToID(): void
    {
        $id = \Ease\Functions::randomNumber(1, 9999);
        $this->object->setMyKey($id);
        $this->assertEquals([$id], $this->object->objectToID([$this->object]));
        parent::testObjectToID();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::getRecordID
     */
    public function testGetRecordID(): void
    {
        parent::testGetRecordID();
        $structure = $this->object->getEvidenceInfo();

        if (!empty($structure) && \count($structure) && \array_key_exists('kod', $structure)) {
            $this->object->setData(['kod' => 'KOD']);
            $this->assertEquals('code:KOD', $this->object->getRecordID());
        }
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::controlMandatoryColumns
     */
    public function testControlMandatoryColumns(): void
    {
        $this->object->controlMandatoryColumns();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::controlReadOnlyColumns
     */
    public function testControlReadOnlyColumns(): void
    {
        $this->object->controlReadOnlyColumns(['id' => 1]);
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::addArrayToBranch
     */
    public function testAddArrayToBranch(): void
    {
        $this->object->addArrayToBranch(['nazev' => 'test'], 'podEvidence');
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::addObjectToBranch
     */
    public function testAddObjectToBranch(): void
    {
        $this->object->addObjectToBranch(new \AbraFlexi\FakturaVydanaPolozka(['nazev' => 'test']));
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::vazbaAdd
     */
    public function testVazbaAdd(): void
    {
        $this->object->vazbaAdd(\Ease\Functions::randomNumber());
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::vazbaDel
     */
    public function testVazbaDel(): void
    {
        $this->object->vazbaDel(\Ease\Functions::randomNumber());
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::getJsonizedData
     */
    public function testGetJsonizedData(): void
    {
        $this->object->setData(['id' => time(), 'nazev' => \Ease\Functions::randomString(),
            'stitky' => ['TEST', 'TESTING']]);
        $this->object->getJsonizedData();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::insertToAbraFlexi
     */
    public function testInsertToAbraFlexi(): void
    {
        $this->object->insertToAbraFlexi(['id' => 'ext:test:'.time()]);
        $this->object->setData(['id' => 'ext:test:'.time()], true);
        $this->object->insertToAbraFlexi();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::parseResponse
     */
    public function testParseResponse(): void
    {
        $responseDecoded = [
            '@version' => '1.0',
            'success' => 'true',
            'stats' => [
                'created' => '1',
                'updated' => '5',
                'deleted' => '0',
                'skipped' => '0',
                'failed' => '0',
            ],
            'results' => [
                0 => [
                    'id' => '792',
                    'request-id' => 'EXT:APP:100',
                    'ref' => '/c/AbraFlexi/adresar/792',
                ],
                1 => [
                    'id' => '793',
                    'request-id' => 'EXT:APP:200',
                    'ref' => '/c/AbraFlexi/adresar/793',
                ],
                2 => [
                    'id' => '794',
                    'request-id' => 'EXT:APP:300',
                    'ref' => '/c/AbraFlexi/adresar/794',
                ],
                3 => [
                    'id' => '795',
                    'request-id' => 'EXT:APP:400',
                    'ref' => '/c/AbraFlexi/adresar/795',
                ],
                4 => [
                    'id' => '830',
                    'request-id' => 'EXT:APP:500',
                    'ref' => '/c/AbraFlexi/banka/830',
                ],
                5 => [
                    'id' => '28',
                    'ref' => '/c/AbraFlexi/adresar-bankovni-ucet/28',
                ],
            ],
        ];
        $this->object->parseResponse($responseDecoded, 201);
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::assignResultIDs
     */
    public function testAssignResultIDs(): void
    {
        $ids = [
            'adresar' => [
                'EXT:APP:100' => '792',
                'EXT:APP:200' => '793',
                'EXT:APP:300' => '794',
                'EXT:APP:400' => '795',
            ],
            'banka' => [
                'EXT:APP:500' => '830',
            ],
            'adresar-bankovni-ucet' => [
                '' => '27',
            ],
        ];
        $this->object->assignResultIDs($ids);
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::extractResultIDs
     */
    public function testExtractResultIDs(): void
    {
        $resultInfo = [
            0 => [
                'id' => '792',
                'request-id' => 'EXT:APP:100',
                'ref' => '/c/AbraFlexi/adresar/792',
            ],
            1 => [
                'id' => '793',
                'request-id' => 'EXT:APP:200',
                'ref' => '/c/AbraFlexi/adresar/793',
            ],
            2 => [
                'id' => '794',
                'request-id' => 'EXT:APP:300',
                'ref' => '/c/AbraFlexi/adresar/794',
            ],
            3 => [
                'id' => '795',
                'request-id' => 'EXT:APP:400',
                'ref' => '/c/AbraFlexi/adresar/795',
            ],
            4 => [
                'id' => '830',
                'request-id' => 'EXT:APP:500',
                'ref' => '/c/AbraFlexi/banka/830',
            ],
            5 => [
                'id' => '26',
                'ref' => '/c/AbraFlexi/adresar-bankovni-ucet/26',
            ],
        ];
        $this->object->extractResultIDs($resultInfo);
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::getLastInsertedId
     */
    public function testGetLastInsertedId(): void
    {
        $this->object->getLastInsertedId();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::sendUnsent
     */
    public function testSendUnsent(): void
    {
        $this->object->sendUnsent();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::deleteFromAbraFlexi
     */
    public function testDeleteFromAbraFlexi(): void
    {
        $this->object->deleteFromAbraFlexi();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::takeData
     */
    public function testTakeData(): void
    {
        $this->object->takeData(['id' => \Ease\Functions::randomNumber()]);
    }

    /**
     * @after
     *
     * @covers \AbraFlexi\AbraFlexiRW::getDataForJSON
     */
    public function testGetDataForJSON(): void
    {
        $this->object->setData(['name' => 'test']);
        $this->object->getDataForJSON();
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::addExternalID
     */
    public function testAddExternalID(): void
    {
        if (empty($this->object->getEvidence())) {
            $this->object->setEvidence('banka');
        }

        $this->object->addExternalID('ext:test:'.\Ease\Functions::randomNumber());
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::changeExternalID
     */
    public function testChangeExternalID(): void
    {
        $this->object->changeExternalID(
            'test',
            \Ease\Functions::randomNumber(),
            \Ease\Functions::randomNumber(),
        );
    }

    /**
     * @covers \AbraFlexi\AbraFlexiRW::sync
     */
    public function testSync(): void
    {
        $code = \Ease\Functions::randomString();
        $this->assertFalse($this->object->sync(['kod' => $code.'X']));

        if ($this->object->getEvidence()) {
            $syncResult = $this->object->sync($this->getDataForInsert($code));
            $this->assertTrue($syncResult);
        }
    }
}
